@page "/Payment"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<h3 style="color:#FAFAD2; text-align: center;">Payment</h3>

<div class="container text-center mt-5">
    <h4 style="color:#FAFAD2;">Select Payment Method:</h4>
    <div>
       @if (!payByCardDisabled)
        {
            <button class="btn default outlined-button justify-items-center my-3" style="color:#FAFAD2;" @onclick="PayByCard">Pay by Card</button>
        }

        @if (!payOnCounterDisabled)
        {
            <button class="btn default outlined-button justify-items-center my-3 ml-3" @onclick="PayOnCounter">Pay on the Counter</button>
        }
    </div>
</div>

<button class="btn default outlined-button justify-items-center my-3" style="color:#FAFAD2; width: 100px;" @onclick="GoHome">Go Home</button>
<button class="btn default outlined-button justify-items-center my-3" style="color:#FAFAD2; width: 100px;" @onclick="GoBack">Go Back</button>

@if (PaymentNumber.HasValue)
{
    <p style="color:#FAFAD2;">Please proceed to the counter and provide the following payment number:</p>
    <h2 style="color:#FAFAD2; font-size: 150px;">@PaymentNumber</h2>
}


@if (showPaymentConfirmation)
{
    <div class="modal fade show" id="paymentConfirmationModal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    @paymentConfirmationMessage
                    <p>Total: $@totalPrice</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn default outlined-button" @onclick="ClosePaymentConfirmation">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="container text-center mt-5">
    <h4 style="color:#FAFAD2;">Coffee Options</h4>
    <div>
        <label>
            <input type="checkbox" @bind="addSugar" /> Add Sugar (+$0.50)
        </label>
        <br />
        <label>
            <input type="checkbox" @bind="withMilk" /> With Milk (+$0.75)
        </label>
    </div>
</div>
    <div class="modal-backdrop fade show"></div>
}

@code {

    private string selectedCoffeeChoice;
    private int? PaymentNumber;
    private bool showPaymentConfirmation = false;
    private bool payByCardDisabled = false;
    private bool payOnCounterDisabled = false;
    private string paymentConfirmationMessage = "";
    private decimal totalPaymentPrice;
    private bool addSugar;
    private bool withMilk;
    private decimal totalPrice;
    private int coffeeQuantity = 1;


    private Dictionary<string, decimal> coffeePrices = new Dictionary<string, decimal>
{
    { "Cappuccino", 3.50M },
    { "Espresso", 2.00M },
    { "Light Latte", 4.00M },
    { "Can Panna", 3.25M }
};

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }
    private void GoBack()
    {
        var queryString = !string.IsNullOrWhiteSpace(selectedCoffeeChoice) ? $"?choice={selectedCoffeeChoice}" : "";
        NavigationManager.NavigateTo($"/PreOrder{queryString}");

    }

    private async Task PayByCard()
    {
        decimal totalPrice = CalculateTotalPrice();
        paymentConfirmationMessage = $"Please continue to the POS terminal. Total: ${totalPrice}";
        showPaymentConfirmation = true;
        payOnCounterDisabled = true;
        payByCardDisabled = true;
    }

    private async Task PayOnCounter()
    {
        decimal totalPrice = CalculateTotalPrice();
        int paymentNumber = GeneratePaymentNumber();
        paymentConfirmationMessage = $"Please proceed to the counter and provide payment number: {paymentNumber}. Total: ${totalPrice}";
        showPaymentConfirmation = true;
        payByCardDisabled = true;
        payOnCounterDisabled = true;
    }


    private decimal CalculateTotalPrice()
    {
        decimal coffeePrice = 0;

        if (!string.IsNullOrWhiteSpace(selectedCoffeeChoice) && coffeePrices.TryGetValue(selectedCoffeeChoice, out var price))
        {
            coffeePrice = price;
        }

        decimal optionsPrice = 0;
        if (addSugar)
        {
            optionsPrice += 0.5M;
        }
        if (withMilk)
        {
            optionsPrice += 0.5M;
        }

        decimal total = (coffeePrice + optionsPrice) * coffeeQuantity;

        return total;
    }

    private void ShowPaymentConfirmationModal()
    {
        totalPaymentPrice = CalculateTotalPrice();
        showPaymentConfirmation = true;
    }

    private int GeneratePaymentNumber()
    {
        Random random = new Random();
        return random.Next(100, 900);
    }

    private void ClosePaymentConfirmation()
    {
        showPaymentConfirmation = false;
    }


    protected override void OnInitialized()
    {
        totalPrice = CalculateTotalPrice();
    }
}
