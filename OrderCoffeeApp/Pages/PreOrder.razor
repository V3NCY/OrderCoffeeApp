@page "/PreOrder"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Pre-Order Page</h1>

@if (!string.IsNullOrWhiteSpace(selectedCoffeeChoice))
{
        <div class="container text-center mt-5">
            <div class="row justify-content-center">
                <div class="col col-sm-4 col-md-3">
    <div style="color:#FAFAD2;">
        <h2 style="color:#FAFAD2;">Your Selected Coffee:</h2>
                    <p style="color:#FAFAD2;">@selectedCoffeeChoice</p>
            <div class="text-center">
               <img src="@GetImagePath(selectedCoffeeChoice)" alt="Selected Coffee" width="200" />
            </div>
                </div>
            </div>
        </div>
    </div>

        <form>
        <div class="container text-center mt-5">
            <div class="row justify-content-center">
                <div class="col col-sm-4 col-md-3">
        <h3 style="color:#FAFAD2; font-weight: bolder; font-size: 30px;">Options:</h3>
        <label for="quantity" style="color:#FAFAD2;">Choose coffee quantity:</label>
            <select id="quantity" @bind="coffeeQuantity">
                @for (int i = 1; i <= 10; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>

        <div style="color:#FAFAD2;">
                <label>
                    <input type="checkbox" @bind="addSugar" /> Sugar
                </label>
            </div>

        <div style="color:#FAFAD2;">
                <label>
                    <input type="checkbox" @bind="noSugar" /> No sugar
                </label>
            </div>

        <div style="color:#FAFAD2;">
                <label>
                    <input type="checkbox" @bind="longCoffee" /> Long coffee
                </label>
            </div>

        <div style="color:#FAFAD2;">
                <label>
                    <input type="checkbox" @bind="shortCoffee" /> Short coffee
                </label>
            </div>

            <div style="color:#FAFAD2;">
                <label>
                    <input type="checkbox" @bind="withMilk" /> With milk
                </label>
            </div>

        <div style="color:#FAFAD2;">
                <label>
                    <input type="checkbox" @bind="withoutMilk" /> Without milk
                </label>
            </div>
    </div>
    </div>
    </div>
        </form>

    @if (!string.IsNullOrWhiteSpace(selectedCoffeeChoice))
    {
        <div class="container text-center mt-5">
            <!-- Rest of your code for displaying coffee choice and options -->
        </div>

        <div style="display: flex; justify-content: center; margin-top: 20px;">
            <button class="btn default outlined-button my-3" @onclick="Order">Confirm Order</button>
            <button class="btn default outlined-button my-3 ml-3" @onclick="Cancel">Cancel</button>
        </div>

        <!-- Confirmation Dialog Modal -->
        <div class="modal fade" id="confirmOrderModal" tabindex="-1" role="dialog" aria-labelledby="confirmOrderModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmOrderModalLabel">Confirm Order</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Do you confirm your order with the following options?
                        <p>@selectedOptions</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Cancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="Order">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(GetMessageFromQueryString()))
    {
        <p>@GetMessageFromQueryString()</p>
        <button class="btn default outlined-button justify-items-center my-3" @onclick="GoBack">Go Back</button>
    }

@*<div  style="display: flex;">
            <button class="btn default outlined-button justify-items-center my-3" style="color:#FAFAD2;" @onclick="Order">Order</button>
            </div>
<div  style="display: flex;">
        <button class="btn default outlined-button justify-items-center my-3" style="color:#FAFAD2;" @onclick="Cancel">Cancel</button>
</div>*@
}

else if (!string.IsNullOrWhiteSpace(GetMessageFromQueryString()))
{
    <p style="color:#FAFAD2;">@GetMessageFromQueryString()</p>
    <button class="btn default outlined-button justify-items-center my-3" style="color:#FAFAD2;" @onclick="GoBack">Go Back</button>
}

@code {
    public string Choice { get; set; }

    private string selectedCoffeeChoice;
    
    private int coffeeQuantity = 1;
    private bool addSugar;
    private bool noSugar;
    private bool longCoffee;
    private bool shortCoffee;
    private bool withMilk;
    private bool withoutMilk; 
    private string selectedBoxDescription;
    private bool mainBoxOpen = false;
    private string coffeeChoice;
    private string selectedOptions;


    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        selectedCoffeeChoice = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("choice");
    }

    private string GetImagePath(string coffeeChoice)
    {
        if (coffeeChoice == "Cappuccino") return "css/cappuccino.png";
        if (coffeeChoice == "Espresso") return "css/espresso.png";
        if (coffeeChoice == "Light Latte") return "css/lightlatte.png";
        if (coffeeChoice == "Can Panna") return "css/canpanna.png";

        return "css/default-coffee.png";
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private string ConstructSelectedOptionsString()
{
    List<string> options = new List<string>();

    if (addSugar) options.Add("Sugar");
    if (noSugar) options.Add("No sugar");
    if (longCoffee) options.Add("Long coffee");
    if (shortCoffee) options.Add("Short coffee");
    if (withMilk) options.Add("With milk");
    if (withoutMilk) options.Add("Without milk");

    return string.Join(", ", options);
}



 private string GetMessageFromQueryString()
    {
        var uri = new Uri(NavigationManager.Uri);
        var message = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("message");
        return message;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task Order()
    {
        if (!string.IsNullOrWhiteSpace(selectedCoffeeChoice))
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Do you confirm your order of: {coffeeQuantity} {GetPluralizedCoffeeText()} with the following added options:\n{ConstructSelectedOptionsString()}?");
            if (confirmed)
            {
                selectedOptions = ConstructSelectedOptionsString();
                NavigationManager.NavigateTo("/Payment"); // Redirect to the payment page
            }
        }
        else
        {
            // Handle the case where no coffee is selected (you can show a message or take appropriate action)
        }
    }

    private string GetPluralizedCoffeeText()
    {
        if (coffeeQuantity == 1)
        {
            return "coffee";
        }
        else
        {
            return "coffees";
        }
    }

}
